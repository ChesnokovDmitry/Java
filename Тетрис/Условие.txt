Наш Тетрис будет состоять из двух вещей: поля из клеток и фигурки, которая падает.
Поэтому для начала создай три класса: Field(поле с клетками), Figure(фигура) и сам Tetris.
Теперь добавь в класс Tetris метод main и два private поля: field типа Field и figure типа Figure.
Добавь геттеры для полей field и figure.
Так же еще нам понадобится пара методов. Добавь в класс Tetris методы run() и step():
run() будет отвечать за всю игру;
step() - за один шаг в игре.
Тип возвращаемого значения void для обоих методов.

Теперь нужно создать объект самого Тетриса.
Добавь в класс Tetris статическое поле game типа Tetris.
Поле game НЕ должно быть приватным.
Затем в методе main создай объект типа Тетрис и сохрани его в эту переменную.
Затем добавь вызов метода run.

Перейдем к классу Field.
Он будет отвечать за хранение данных о текущих занятых и свободных клетках на поле игры.
Добавь в класс Field два поля поля: width (ширина) типа int, height(высота) типа int.
Так же нам понадобится матрица - двумерный массив: matrix(матрица) типа int[][];
Там же добавь getter'ы для созданных переменных.
Добавь конструктор с двумя параметрами width и height. И не забудь про матрицу.
ВАЖНО!
Двумерный массив можно представить как массив массивов или как прямоугольную матрицу.
При этом первой координатой в массиве у нас будет номер строки, а второй - столбца.
Другими словами ячейка с координатами x, y - это matrix[y][x].
Нам понадобится еще 4 метода в классе Field:
а) void print() - объект будет отрисовывать на экран свое текущее состояние;
б) void removeFullLines() - будет удалять из матрицы полностью заполненные строки и сдвигать вышележащие строки вниз;
в) Integer getValue(int x, int y) - возвращает значение которое находится в матрице с координатами x и y; Реализацию метода мы напишем позже, а сейчас для того, чтобы программа скомпилировалась, верни в методе какое-нибудь значение, например, null.
г) void setValue(int x, int y, int value) - устанавливает переданное значение в ячейку массива (матрицы) с координатами x, y.

Теперь создадим костяк класса Figure.
Этот класс будет описывать падающую фигурку. Нам понадобятся ее координаты и форма.
За координаты будут отвечать две переменные x и y. За форму - матрица. Двумерный массив 3×3, состоящий из единиц и нулей.
Единицей мы обозначаем что клетка есть, нулем - что она пустая.
Добавь в класс Figure два поля поля: x типа int, y типа int.
Еще добавь двумерный массив: matrix(матрица) типа int[][].
Там же добавь getter'ы для созданных переменных.
Добавь конструктор с тремя параметрами x, y, matrix.

Также нам понадобятся методы для управления фигуркой.
Добавь в класс Figure методы:
left() - для движения фигурки влево.
right() - для движения фигурки вправо.
down() - для движения фигурки вниз.
up() - для движения фигурки вверх.
rotate() - для поворота фигурки вокруг главной диагонали.
downMaximum() - падение фигурки вниз до дна.
boolean isCurrentPositionAvailable() - проверка - может ли фигурка быть помещена в текущую позицию. Для теста захардкодь результат в true, пока мы не реализовали логику.
landed() - вызывается, когда фигурка достигла дна или уперлась в другую фигурку
Все ее занятые клетки теперь должны добавиться в Field.

Теперь создай класс FigureFactory.
С его помощью мы будем создавать фигуры различных форм.
Пока он будет содержать только один статический метод createRandomFigure:
static Figure createRandomFigure(int x,int y)

Требования:
1. В классе Tetris должен быть создан метод getField без параметров.
2. В классе Tetris должен быть создан метод getFigure без параметров.
3. Метод getField должен возвращать значение поля field.
4. Метод getFigure должен возвращать значение поля figure.
5. В классе Tetris должен быть создан метод run без параметров.
6. В классе Tetris должен быть создан метод step без параметров.
7. В классе Field должен быть создан корректно работающий конструктор с параметрами int, int. Поле matrix должно быть инициализировано новым массивом размерностью [y][x] (height и width).





В тетрисе мы управляем движением фигурки с помощью клавиатуры.
Тут есть 4 действия:
движение влево (кнопка влево)
движение вправо (кнопка вправо)
поворот фигурки (цифра 5 на доп.клавиатуре справа)
падение вниз (пробел)
Мы будем обрабатывать ввод с клавиатуры в методе run() класса Tetris.
Java не позволяет считать нажатые символы с клавиатуры, пока пользователь не нажмет enter.
Специальный класс (KeyboardObserver), позволяет обойти это ограничение. Воспользуемся им.
Теперь приступим к реализации созданных методов.
Напиши реализацию метода print в классе Field
а) Метод должен выводить на экран прямоугольник состоящий из символов '.' и 'X'.
б) Высота прямоугольника равна height, ширина - width
в) Если данная клетка пустая - вывести точку, если не пустая - английский X

Требования:
1. Метод print должен выводить данные на экран.
2. Метод print должен выводить на экран количество строк равное height.
3. Количество символов в каждой строке выведенной на экран должно быть равно width.
4. В случае, если элемент массива равен 0 - на экран должна быть выведена точка, иначе - английский X.





Реализация метода removeFullLines в классе Field. Надо:
а) удалить все строки из матрицы, которые полностью заполнены (состоят из одних единиц);
б) сместить оставшиеся строки вниз;
в) создать новые строки взамен отсутствующих.
ВАЖНО!
matrix[y][x] содержит элемент с координатами (x,y).
matrix[i] содержит i-ю строку.
Мы можем:
а) удалить стоку:
matrix[i] = null
б) скопировать [ссылку на] строку:
matrix[i+1] = matrix[i];
в) создать новую строку:
matrix[i] = new int[width];

Требования:
1. После выполнения метода removeFullLines в массиве matrix не должно остаться строк состоящих из одних единиц.
2. Оставшиеся строки должны быть корректно перемещены, а вместо отсутствующих добавлены новые.





Реализация метода step в классе Tetris.
В методе надо переместить фигурку вниз на один шаг.

Если после перемещения положить фигурку на текущее место невозможно, то:
а) поднять ее обратно (up)
б) "приземлить" ее (landed)
в) удалить все "полные линии" в объекте field
г) создать новую фигурку взамен старой.

Requirements:
1. В методе step класса Tetris необходимо переместить на 1 шаг вниз текущую фигуру.
2. В методе step класса Tetris необходимо вызвать метод up у текущей фигуры, если ее дальнейшее перемещение невозможно.
3. В методе step класса Tetris необходимо вызвать метод landed у текущей фигуры, если ее дальнейшее перемещение невозможно.
4. В методе step класса Tetris необходимо удалить все полные строки, если дальнейшее перемещение текущей фигуры невозможно.
5. В методе step класса Tetris необходимо создать новую случайную фигуру(метод createRandomFigure) и сохранить ее в поле figure, если дальнейшее перемещение текущей фигуры невозможно.





Реализация методов left(), right(), up(), down() в классе Figure.
Обрати внимание: в процессе реализации некоторых методов тебе надо будет проверять нарушение границ игрового поля, делать это нужно с помощью существующего метода isCurrentPositionAvailable().

Requirements:
1. Метод left() должен уменьшать значение поля x на единицу, если это возможно(не нарушены границы игрового поля).
2. Метод right() должен увеличивать значение поля x на единицу, если это возможно(не нарушены границы игрового поля).
3. Метод up() должен уменьшать значение поля y на единицу.
4. Метод down() должен увеличивать значение поля y на единицу.